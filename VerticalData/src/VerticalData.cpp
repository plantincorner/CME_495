// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------


/************************************************************
 VerticalData class body
 ************************************************************/

// include associated header file
#include "../includes/VerticalData.hpp"

void VerticalData::storeHeight(Height &ht)
{
	if(this->heights.empty())
	{
		this->heights.push(ht);
	}
	else
	{
		this->heights.push(ht);
		this->calculateVelocity();
		this->heights.pop();
	}
}

float VerticalData::getVelocity() {
	return this->velocity;
}

void VerticalData::printAll()
{
	if (this->heights.empty())
	{
		cout << "no data to print" << endl;
	}
	else if (this->heights.size() == 1)
	{
		cout << "No previous Height" << endl;
		cout << "current height: " << endl;
		this->heights.front().printAll();
	}
	else
	{
		cout << "previous height:" << endl;
		this->heights.front().printAll();
		cout << "current height";
		this->heights.back().printAll();
	}

}


void VerticalData::calculateVelocity() {
	float deltaT = 0;
	float deltaH = 0;
	time_t currentTime = this->heights.back().getTime();
	time_t previousTime = this->heights.front().getTime();
	float currentHeight = this->heights.back().getData();
	float previousHeight = this->heights.front().getData();

	deltaT = currentTime - previousTime;
	deltaH = currentHeight - previousHeight;

	this->velocity = (deltaH/deltaT);
}

/************************************************************
 End of VerticalData class body
 ************************************************************/

